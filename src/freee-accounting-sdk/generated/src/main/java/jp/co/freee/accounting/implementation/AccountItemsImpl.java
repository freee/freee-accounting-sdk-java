/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.AccountItems;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.AccountItemParams;
import jp.co.freee.accounting.models.AccountItemsCreateResponse;
import jp.co.freee.accounting.models.AccountItemsIndexResponse;
import jp.co.freee.accounting.models.AccountItemsShowResponse;
import jp.co.freee.accounting.models.AccountItemsUpdateResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AccountItems.
 */
public class AccountItemsImpl implements AccountItems {
    /** The Retrofit service to perform REST calls. */
    private AccountItemsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of AccountItems.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AccountItemsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(AccountItemsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AccountItems to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AccountItemsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.AccountItems get" })
        @GET("account_items/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") int id, @Query("company_id") int companyId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.AccountItems update" })
        @PUT("account_items/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") int id, @Body AccountItemParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.AccountItems list" })
        @GET("account_items")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId, @Query("base_date") String baseDate);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.AccountItems create" })
        @POST("account_items")
        Observable<Response<ResponseBody>> create(@Body AccountItemParams parameters);

    }

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsShowResponse object if successful.
     */
    public AccountItemsShowResponse get(int companyId, int id) {
        return getWithServiceResponseAsync(companyId, id).toBlocking().single().body();
    }

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountItemsShowResponse> getAsync(int companyId, int id, final ServiceCallback<AccountItemsShowResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(companyId, id), serviceCallback);
    }

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsShowResponse object
     */
    public Observable<AccountItemsShowResponse> getAsync(int companyId, int id) {
        return getWithServiceResponseAsync(companyId, id).map(new Func1<ServiceResponse<AccountItemsShowResponse>, AccountItemsShowResponse>() {
            @Override
            public AccountItemsShowResponse call(ServiceResponse<AccountItemsShowResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsShowResponse object
     */
    public Observable<ServiceResponse<AccountItemsShowResponse>> getWithServiceResponseAsync(int companyId, int id) {
        return service.get(id, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountItemsShowResponse>>>() {
                @Override
                public Observable<ServiceResponse<AccountItemsShowResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountItemsShowResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountItemsShowResponse> getDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<AccountItemsShowResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountItemsShowResponse>() { }.getType())
                .build(response);
    }

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsUpdateResponse object if successful.
     */
    public AccountItemsUpdateResponse update(AccountItemParams parameters, int id) {
        return updateWithServiceResponseAsync(parameters, id).toBlocking().single().body();
    }

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountItemsUpdateResponse> updateAsync(AccountItemParams parameters, int id, final ServiceCallback<AccountItemsUpdateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(parameters, id), serviceCallback);
    }

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsUpdateResponse object
     */
    public Observable<AccountItemsUpdateResponse> updateAsync(AccountItemParams parameters, int id) {
        return updateWithServiceResponseAsync(parameters, id).map(new Func1<ServiceResponse<AccountItemsUpdateResponse>, AccountItemsUpdateResponse>() {
            @Override
            public AccountItemsUpdateResponse call(ServiceResponse<AccountItemsUpdateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsUpdateResponse object
     */
    public Observable<ServiceResponse<AccountItemsUpdateResponse>> updateWithServiceResponseAsync(AccountItemParams parameters, int id) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountItemsUpdateResponse>>>() {
                @Override
                public Observable<ServiceResponse<AccountItemsUpdateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountItemsUpdateResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountItemsUpdateResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountItemsUpdateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountItemsUpdateResponse>() { }.getType())
                .build(response);
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsIndexResponse object if successful.
     */
    public AccountItemsIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountItemsIndexResponse> listAsync(int companyId, final ServiceCallback<AccountItemsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    public Observable<AccountItemsIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<AccountItemsIndexResponse>, AccountItemsIndexResponse>() {
            @Override
            public AccountItemsIndexResponse call(ServiceResponse<AccountItemsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    public Observable<ServiceResponse<AccountItemsIndexResponse>> listWithServiceResponseAsync(int companyId) {
        final String baseDate = null;
        return service.list(companyId, baseDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountItemsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<AccountItemsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountItemsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsIndexResponse object if successful.
     */
    public AccountItemsIndexResponse list(int companyId, String baseDate) {
        return listWithServiceResponseAsync(companyId, baseDate).toBlocking().single().body();
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountItemsIndexResponse> listAsync(int companyId, String baseDate, final ServiceCallback<AccountItemsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId, baseDate), serviceCallback);
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    public Observable<AccountItemsIndexResponse> listAsync(int companyId, String baseDate) {
        return listWithServiceResponseAsync(companyId, baseDate).map(new Func1<ServiceResponse<AccountItemsIndexResponse>, AccountItemsIndexResponse>() {
            @Override
            public AccountItemsIndexResponse call(ServiceResponse<AccountItemsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    public Observable<ServiceResponse<AccountItemsIndexResponse>> listWithServiceResponseAsync(int companyId, String baseDate) {
        return service.list(companyId, baseDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountItemsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<AccountItemsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountItemsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountItemsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<AccountItemsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccountItemsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsCreateResponse object if successful.
     */
    public AccountItemsCreateResponse create(AccountItemParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccountItemsCreateResponse> createAsync(AccountItemParams parameters, final ServiceCallback<AccountItemsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsCreateResponse object
     */
    public Observable<AccountItemsCreateResponse> createAsync(AccountItemParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<AccountItemsCreateResponse>, AccountItemsCreateResponse>() {
            @Override
            public AccountItemsCreateResponse call(ServiceResponse<AccountItemsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsCreateResponse object
     */
    public Observable<ServiceResponse<AccountItemsCreateResponse>> createWithServiceResponseAsync(AccountItemParams parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccountItemsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<AccountItemsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccountItemsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccountItemsCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccountItemsCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<AccountItemsCreateResponse>() { }.getType())
                .build(response);
    }

}
