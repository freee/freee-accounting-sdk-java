/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.AccountItemParams;
import jp.co.freee.accounting.models.AccountItemsCreateResponse;
import jp.co.freee.accounting.models.AccountItemsIndexResponse;
import jp.co.freee.accounting.models.AccountItemsShowResponse;
import jp.co.freee.accounting.models.AccountItemsUpdateResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AccountItems.
 */
public interface AccountItems {
    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsShowResponse object if successful.
     */
    AccountItemsShowResponse get(int companyId, int id);

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AccountItemsShowResponse> getAsync(int companyId, int id, final ServiceCallback<AccountItemsShowResponse> serviceCallback);

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsShowResponse object
     */
    Observable<AccountItemsShowResponse> getAsync(int companyId, int id);

    /**
     * 勘定科目の詳細情報の取得.
     * 指定した勘定科目の詳細を取得する.
     *
     * @param companyId 事業所ID
     * @param id 勘定科目ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsShowResponse object
     */
    Observable<ServiceResponse<AccountItemsShowResponse>> getWithServiceResponseAsync(int companyId, int id);

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsUpdateResponse object if successful.
     */
    AccountItemsUpdateResponse update(AccountItemParams parameters, int id);

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AccountItemsUpdateResponse> updateAsync(AccountItemParams parameters, int id, final ServiceCallback<AccountItemsUpdateResponse> serviceCallback);

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsUpdateResponse object
     */
    Observable<AccountItemsUpdateResponse> updateAsync(AccountItemParams parameters, int id);

    /**
     * 勘定科目の更新.
     * 勘定科目を更新する.
     *
     * @param parameters 勘定科目の更新
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsUpdateResponse object
     */
    Observable<ServiceResponse<AccountItemsUpdateResponse>> updateWithServiceResponseAsync(AccountItemParams parameters, int id);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsIndexResponse object if successful.
     */
    AccountItemsIndexResponse list(int companyId);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AccountItemsIndexResponse> listAsync(int companyId, final ServiceCallback<AccountItemsIndexResponse> serviceCallback);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    Observable<AccountItemsIndexResponse> listAsync(int companyId);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    Observable<ServiceResponse<AccountItemsIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsIndexResponse object if successful.
     */
    AccountItemsIndexResponse list(int companyId, String baseDate);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AccountItemsIndexResponse> listAsync(int companyId, String baseDate, final ServiceCallback<AccountItemsIndexResponse> serviceCallback);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    Observable<AccountItemsIndexResponse> listAsync(int companyId, String baseDate);

    /**
     * 勘定科目一覧の取得.
     * 指定した事業所の勘定科目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param baseDate 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsIndexResponse object
     */
    Observable<ServiceResponse<AccountItemsIndexResponse>> listWithServiceResponseAsync(int companyId, String baseDate);

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccountItemsCreateResponse object if successful.
     */
    AccountItemsCreateResponse create(AccountItemParams parameters);

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AccountItemsCreateResponse> createAsync(AccountItemParams parameters, final ServiceCallback<AccountItemsCreateResponse> serviceCallback);

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsCreateResponse object
     */
    Observable<AccountItemsCreateResponse> createAsync(AccountItemParams parameters);

    /**
     * 勘定科目の作成.
     * 指定した事業所の勘定科目を作成する.
     *
     * @param parameters 勘定科目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccountItemsCreateResponse object
     */
    Observable<ServiceResponse<AccountItemsCreateResponse>> createWithServiceResponseAsync(AccountItemParams parameters);

}
