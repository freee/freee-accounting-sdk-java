/*
 * freee API
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import jp.co.freee.accounting.models.FiscalYears;

/**
 * CompanyResponseCompany
 */

public class CompanyResponseCompany {
  public static final String SERIALIZED_NAME_AMOUNT_FRACTION = "amount_fraction";
  @SerializedName(SERIALIZED_NAME_AMOUNT_FRACTION)
  private Integer amountFraction;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contact_name";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_CORPORATE_NUMBER = "corporate_number";
  @SerializedName(SERIALIZED_NAME_CORPORATE_NUMBER)
  private String corporateNumber;

  public static final String SERIALIZED_NAME_DEFAULT_WALLET_ACCOUNT_ID = "default_wallet_account_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WALLET_ACCOUNT_ID)
  private Integer defaultWalletAccountId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FISCAL_YEARS = "fiscal_years";
  @SerializedName(SERIALIZED_NAME_FISCAL_YEARS)
  private List<FiscalYears> fiscalYears = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEAD_COUNT = "head_count";
  @SerializedName(SERIALIZED_NAME_HEAD_COUNT)
  private Integer headCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
   */
  @JsonAdapter(IndustryClassEnum.Adapter.class)
  public enum IndustryClassEnum {
    AGRICULTURE_FORESTRY_FISHERIES_ORE("agriculture_forestry_fisheries_ore"),
    
    CONSTRUCTION("construction"),
    
    MANUFACTURING_PROCESSING("manufacturing_processing"),
    
    IT("it"),
    
    TRANSPORTATION_LOGISTICS("transportation_logistics"),
    
    RETAIL_WHOLESALE("retail_wholesale"),
    
    FINANCE_INSURANCE("finance_insurance"),
    
    REAL_ESTATE_RENTAL("real_estate_rental"),
    
    PROFESSION("profession"),
    
    DESIGN_PRODUCTION("design_production"),
    
    FOOD("food"),
    
    LEISURE_ENTERTAINMENT("leisure_entertainment"),
    
    LIFESTYLE("lifestyle"),
    
    EDUCATION("education"),
    
    MEDICAL_WELFARE("medical_welfare"),
    
    OTHER_SERVICES("other_services"),
    
    OTHER("other");

    private String value;

    IndustryClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryClassEnum fromValue(String value) {
      for (IndustryClassEnum b : IndustryClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryClassEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_CLASS = "industry_class";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CLASS)
  private IndustryClassEnum industryClass;

  /**
   * 業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)
   */
  @JsonAdapter(IndustryCodeEnum.Adapter.class)
  public enum IndustryCodeEnum {
    AGRICULTURE("agriculture"),
    
    FORESTRY("forestry"),
    
    FISHING_INDUSTRY("fishing_industry"),
    
    MINING("mining"),
    
    CIVIL_CONTRACTORS("civil_contractors"),
    
    PAVEMENT("pavement"),
    
    CARPENTER("carpenter"),
    
    RENOVATION("renovation"),
    
    ELECTRICAL_PLUMBING("electrical_plumbing"),
    
    GROCERY("grocery"),
    
    MACHINERY_MANUFACTURING("machinery_manufacturing"),
    
    PRINTING("printing"),
    
    OTHER_MANUFACTURING("other_manufacturing"),
    
    SOFTWARE_DEVELOPMENT("software_development"),
    
    SYSTEM_DEVELOPMENT("system_development"),
    
    SURVEY_ANALYSIS("survey_analysis"),
    
    SERVER_MANAGEMENT("server_management"),
    
    WEBSITE_PRODUCTION("website_production"),
    
    ONLINE_SERVICE_MANAGEMENT("online_service_management"),
    
    ONLINE_ADVERTISING_AGENCY("online_advertising_agency"),
    
    ONLINE_ADVERTISING_PLANNING_PRODUCTION("online_advertising_planning_production"),
    
    ONLINE_MEDIA_MANAGEMENT("online_media_management"),
    
    PORTAL_SITE_MANAGEMENT("portal_site_management"),
    
    OTHER_IT_SERVICES("other_it_services"),
    
    TRANSPORT_DELIVERY("transport_delivery"),
    
    DELIVERY("delivery"),
    
    OTHER_TRANSPORTATION_LOGISTICS("other_transportation_logistics"),
    
    OTHER_WHOLESALE("other_wholesale"),
    
    CLOTHING_WHOLESALE_FIBER("clothing_wholesale_fiber"),
    
    FOOD_WHOLESALE("food_wholesale"),
    
    ENTRUSTED_DEVELOPMENT_WHOLESALE("entrusted_development_wholesale"),
    
    ONLINE_SHOP("online_shop"),
    
    FASHION_GROCERY_STORE("fashion_grocery_store"),
    
    FOOD_STORE("food_store"),
    
    ENTRUSTED_STORE("entrusted_store"),
    
    OTHER_STORE("other_store"),
    
    FINANCIAL_INSTRUMENTS_EXCHANGE("financial_instruments_exchange"),
    
    COMMODITY_FUTURES_INVESTMENT_ADVISOR("commodity_futures_investment_advisor"),
    
    OTHER_FINANCIAL("other_financial"),
    
    BROKERAGE_INSURANCE("brokerage_insurance"),
    
    OTHER_INSURANCE("other_insurance"),
    
    REAL_ESTATE_DEVELOPER("real_estate_developer"),
    
    REAL_ESTATE_BROKERAGE("real_estate_brokerage"),
    
    RENT_COIN_PARKING_MANAGEMENT("rent_coin_parking_management"),
    
    RENTAL_OFFICE_CO_WORKING_SPACE("rental_office_co_working_space"),
    
    RENTAL_LEASE("rental_lease"),
    
    CPA_TAX_ACCOUNTANT("cpa_tax_accountant"),
    
    LAW_OFFICE("law_office"),
    
    JUDICIAL_AND_ADMINISTRATIVE_SCRIVENER("judicial_and_administrative_scrivener"),
    
    LABOR_CONSULTANT("labor_consultant"),
    
    OTHER_PROFESSION("other_profession"),
    
    BUSINESS_CONSULTANT("business_consultant"),
    
    ACADEMIC_RESEARCH_DEVELOPMENT("academic_research_development"),
    
    ADVERTISING_AGENCY("advertising_agency"),
    
    ADVERTISING_PLANNING_PRODUCTION("advertising_planning_production"),
    
    DESIGN_DEVELOPMENT("design_development"),
    
    APPAREL_INDUSTRY_DESIGN("apparel_industry_design"),
    
    WEBSITE_DESIGN("website_design"),
    
    ADVERTISING_PLANNING_DESIGN("advertising_planning_design"),
    
    OTHER_DESIGN("other_design"),
    
    RESTAURANTS_COFFEE_SHOPS("restaurants_coffee_shops"),
    
    SALE_OF_LUNCH("sale_of_lunch"),
    
    BREAD_CONFECTIONERY_MANUFACTURE_SALE("bread_confectionery_manufacture_sale"),
    
    DELIVERY_CATERING_MOBILE_CATERING("delivery_catering_mobile_catering"),
    
    HOTEL_INN("hotel_inn"),
    
    HOMESTAY("homestay"),
    
    TRAVEL_AGENCY("travel_agency"),
    
    LEISURE_SPORTS_FACILITY_MANAGEMENT("leisure_sports_facility_management"),
    
    SHOW_EVENT_MANAGEMENT("show_event_management"),
    
    BARBER("barber"),
    
    BEAUTY_SALON("beauty_salon"),
    
    SPA_SAND_BATH_SAUNA("spa_sand_bath_sauna"),
    
    ESTE_AIL_SALON("este_ail_salon"),
    
    BRIDAL_PLANNING_INTRODUCE_WEDDING("bridal_planning_introduce_wedding"),
    
    MEMORIAL_CEREMONY_FUNERAL("memorial_ceremony_funeral"),
    
    MOVING("moving"),
    
    COURIER_INDUSTRY("courier_industry"),
    
    HOUSE_MAID_CLEANING_AGENCY("house_maid_cleaning_agency"),
    
    RE_TAILORING_CLOTHES("re_tailoring_clothes"),
    
    TRAINING_INSTITUTE_MANAGEMENT("training_institute_management"),
    
    TUTORING_SCHOOL("tutoring_school"),
    
    MUSIC_CALLIGRAPHY_ABACUS_CLASSROOM("music_calligraphy_abacus_classroom"),
    
    ENGLISH_SCHOOL("english_school"),
    
    TENNIS_YOGA_JUDO_SCHOOL("tennis_yoga_judo_school"),
    
    CULTURE_SCHOOL("culture_school"),
    
    SEMINAR_PLANNING_MANAGEMENT("seminar_planning_management"),
    
    HOSPITAL_CLINIC("hospital_clinic"),
    
    DENTAL_CLINIC("dental_clinic"),
    
    OTHER_MEDICAL_SERVICES("other_medical_services"),
    
    NURSERY("nursery"),
    
    NURSING_HOME("nursing_home"),
    
    REHABILITATION_SUPPORT_SERVICES("rehabilitation_support_services"),
    
    OTHER_WELFARE("other_welfare"),
    
    VISIT_WELFARE_SERVICE("visit_welfare_service"),
    
    RECRUITMENT_TEMPORARY_STAFFING("recruitment_temporary_staffing"),
    
    LIFE_RELATED_RECRUITMENT_TEMPORARY_STAFFING("life_related_recruitment_temporary_staffing"),
    
    CAR_MAINTENANCE_CAR_REPAIR("car_maintenance_car_repair"),
    
    MACHINERY_EQUIPMENT_MAINTENANCE_REPAIR("machinery_equipment_maintenance_repair"),
    
    CLEANING_MAINTENANCE_BUILDING_MANAGEMENT("cleaning_maintenance_building_management"),
    
    SECURITY("security"),
    
    OTHER_SERVICES("other_services"),
    
    NPO("npo"),
    
    GENERAL_INCORPORATED_ASSOCIATION("general_incorporated_association"),
    
    GENERAL_INCORPORATED_FOUNDATION("general_incorporated_foundation"),
    
    OTHER_ASSOCIATION("other_association");

    private String value;

    IndustryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryCodeEnum fromValue(String value) {
      for (IndustryCodeEnum b : IndustryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_CODE = "industry_code";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CODE)
  private IndustryCodeEnum industryCode;

  /**
   * 請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン
   */
  @JsonAdapter(InvoiceLayoutEnum.Adapter.class)
  public enum InvoiceLayoutEnum {
    DEFAULT_CLASSIC("default_classic"),
    
    STANDARD_CLASSIC("standard_classic"),
    
    ENVELOPE_CLASSIC("envelope_classic"),
    
    CARRIED_FORWARD_STANDARD_CLASSIC("carried_forward_standard_classic"),
    
    CARRIED_FORWARD_ENVELOPE_CLASSIC("carried_forward_envelope_classic"),
    
    DEFAULT_MODERN("default_modern"),
    
    STANDARD_MODERN("standard_modern"),
    
    ENVELOPE_MODERN("envelope_modern");

    private String value;

    InvoiceLayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceLayoutEnum fromValue(String value) {
      for (InvoiceLayoutEnum b : InvoiceLayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceLayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceLayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceLayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceLayoutEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_LAYOUT = "invoice_layout";
  @SerializedName(SERIALIZED_NAME_INVOICE_LAYOUT)
  private InvoiceLayoutEnum invoiceLayout;

  public static final String SERIALIZED_NAME_MINUS_FORMAT = "minus_format";
  @SerializedName(SERIALIZED_NAME_MINUS_FORMAT)
  private Integer minusFormat;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_KANA = "name_kana";
  @SerializedName(SERIALIZED_NAME_NAME_KANA)
  private String nameKana;

  public static final String SERIALIZED_NAME_PHONE1 = "phone1";
  @SerializedName(SERIALIZED_NAME_PHONE1)
  private String phone1;

  public static final String SERIALIZED_NAME_PHONE2 = "phone2";
  @SerializedName(SERIALIZED_NAME_PHONE2)
  private String phone2;

  public static final String SERIALIZED_NAME_PREFECTURE_CODE = "prefecture_code";
  @SerializedName(SERIALIZED_NAME_PREFECTURE_CODE)
  private Integer prefectureCode;

  public static final String SERIALIZED_NAME_PRIVATE_SETTLEMENT = "private_settlement";
  @SerializedName(SERIALIZED_NAME_PRIVATE_SETTLEMENT)
  private Boolean privateSettlement;

  /**
   * ユーザーの権限
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ADMIN("admin"),
    
    SIMPLE_ACCOUNTING("simple_accounting"),
    
    SELF_ONLY("self_only"),
    
    READ_ONLY("read_only");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_STREET_NAME1 = "street_name1";
  @SerializedName(SERIALIZED_NAME_STREET_NAME1)
  private String streetName1;

  public static final String SERIALIZED_NAME_STREET_NAME2 = "street_name2";
  @SerializedName(SERIALIZED_NAME_STREET_NAME2)
  private String streetName2;

  public static final String SERIALIZED_NAME_TAX_AT_SOURCE_CALC_TYPE = "tax_at_source_calc_type";
  @SerializedName(SERIALIZED_NAME_TAX_AT_SOURCE_CALC_TYPE)
  private Integer taxAtSourceCalcType;

  /**
   * 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
   */
  @JsonAdapter(TxnNumberFormatEnum.Adapter.class)
  public enum TxnNumberFormatEnum {
    NOT_USED("not_used"),
    
    DIGITS("digits"),
    
    ALNUM("alnum");

    private String value;

    TxnNumberFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TxnNumberFormatEnum fromValue(String value) {
      for (TxnNumberFormatEnum b : TxnNumberFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TxnNumberFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TxnNumberFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TxnNumberFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TxnNumberFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TXN_NUMBER_FORMAT = "txn_number_format";
  @SerializedName(SERIALIZED_NAME_TXN_NUMBER_FORMAT)
  private TxnNumberFormatEnum txnNumberFormat;

  public static final String SERIALIZED_NAME_USE_PARTNER_CODE = "use_partner_code";
  @SerializedName(SERIALIZED_NAME_USE_PARTNER_CODE)
  private Boolean usePartnerCode;

  /**
   * 仕訳承認フロー（enable: 有効、 disable: 無効）
   */
  @JsonAdapter(WorkflowSettingEnum.Adapter.class)
  public enum WorkflowSettingEnum {
    ENABLE("enable"),
    
    DISABLE("disable");

    private String value;

    WorkflowSettingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowSettingEnum fromValue(String value) {
      for (WorkflowSettingEnum b : WorkflowSettingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkflowSettingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowSettingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowSettingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkflowSettingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_WORKFLOW_SETTING = "workflow_setting";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_SETTING)
  private WorkflowSettingEnum workflowSetting;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;


  public CompanyResponseCompany amountFraction(Integer amountFraction) {
    
    this.amountFraction = amountFraction;
    return this;
  }

   /**
   * 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
   * minimum: 0
   * maximum: 2
   * @return amountFraction
  **/
  @ApiModelProperty(example = "0", required = true, value = "金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）")

  public Integer getAmountFraction() {
    return amountFraction;
  }


  public void setAmountFraction(Integer amountFraction) {
    this.amountFraction = amountFraction;
  }


  public CompanyResponseCompany contactName(String contactName) {
    
    this.contactName = contactName;
    return this;
  }

   /**
   * 担当者名 (50文字以内)
   * @return contactName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "user1", required = true, value = "担当者名 (50文字以内)")

  public String getContactName() {
    return contactName;
  }


  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public CompanyResponseCompany corporateNumber(String corporateNumber) {
    
    this.corporateNumber = corporateNumber;
    return this;
  }

   /**
   * 法人番号 (半角数字13桁、法人のみ)
   * @return corporateNumber
  **/
  @ApiModelProperty(example = "1234567890123", required = true, value = "法人番号 (半角数字13桁、法人のみ)")

  public String getCorporateNumber() {
    return corporateNumber;
  }


  public void setCorporateNumber(String corporateNumber) {
    this.corporateNumber = corporateNumber;
  }


  public CompanyResponseCompany defaultWalletAccountId(Integer defaultWalletAccountId) {
    
    this.defaultWalletAccountId = defaultWalletAccountId;
    return this;
  }

   /**
   * 決済口座のデフォルト
   * minimum: 1
   * maximum: 2147483647
   * @return defaultWalletAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "決済口座のデフォルト")

  public Integer getDefaultWalletAccountId() {
    return defaultWalletAccountId;
  }


  public void setDefaultWalletAccountId(Integer defaultWalletAccountId) {
    this.defaultWalletAccountId = defaultWalletAccountId;
  }


  public CompanyResponseCompany displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * 事業所名
   * @return displayName
  **/
  @ApiModelProperty(example = "freee事務所", required = true, value = "事業所名")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CompanyResponseCompany fax(String fax) {
    
    this.fax = fax;
    return this;
  }

   /**
   * FAX
   * @return fax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "03-1234-xxxx", required = true, value = "FAX")

  public String getFax() {
    return fax;
  }


  public void setFax(String fax) {
    this.fax = fax;
  }


  public CompanyResponseCompany fiscalYears(List<FiscalYears> fiscalYears) {
    
    this.fiscalYears = fiscalYears;
    return this;
  }

  public CompanyResponseCompany addFiscalYearsItem(FiscalYears fiscalYearsItem) {
    this.fiscalYears.add(fiscalYearsItem);
    return this;
  }

   /**
   * Get fiscalYears
   * @return fiscalYears
  **/
  @ApiModelProperty(required = true, value = "")

  public List<FiscalYears> getFiscalYears() {
    return fiscalYears;
  }


  public void setFiscalYears(List<FiscalYears> fiscalYears) {
    this.fiscalYears = fiscalYears;
  }


  public CompanyResponseCompany headCount(Integer headCount) {
    
    this.headCount = headCount;
    return this;
  }

   /**
   * 従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上
   * minimum: 0
   * maximum: 7
   * @return headCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", required = true, value = "従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上")

  public Integer getHeadCount() {
    return headCount;
  }


  public void setHeadCount(Integer headCount) {
    this.headCount = headCount;
  }


  public CompanyResponseCompany id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * 事業所ID
   * minimum: 1
   * maximum: 2147483647
   * @return id
  **/
  @ApiModelProperty(example = "1", required = true, value = "事業所ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CompanyResponseCompany industryClass(IndustryClassEnum industryClass) {
    
    this.industryClass = industryClass;
    return this;
  }

   /**
   * 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
   * @return industryClass
  **/
  @ApiModelProperty(example = "agriculture_forestry_fisheries_ore", required = true, value = "種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）")

  public IndustryClassEnum getIndustryClass() {
    return industryClass;
  }


  public void setIndustryClass(IndustryClassEnum industryClass) {
    this.industryClass = industryClass;
  }


  public CompanyResponseCompany industryCode(IndustryCodeEnum industryCode) {
    
    this.industryCode = industryCode;
    return this;
  }

   /**
   * 業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)
   * @return industryCode
  **/
  @ApiModelProperty(required = true, value = "業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)")

  public IndustryCodeEnum getIndustryCode() {
    return industryCode;
  }


  public void setIndustryCode(IndustryCodeEnum industryCode) {
    this.industryCode = industryCode;
  }


  public CompanyResponseCompany invoiceLayout(InvoiceLayoutEnum invoiceLayout) {
    
    this.invoiceLayout = invoiceLayout;
    return this;
  }

   /**
   * 請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン
   * @return invoiceLayout
  **/
  @ApiModelProperty(example = "default_classic", required = true, value = "請求書レイアウト * `default_classic` - レイアウト１/クラシック (デフォルト)  * `standard_classic` - レイアウト２/クラシック  * `envelope_classic` - 封筒１/クラシック  * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック  * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック  * `default_modern` - レイアウト１/モダン  * `standard_modern` - レイアウト２/モダン  * `envelope_modern` - 封筒/モダン")

  public InvoiceLayoutEnum getInvoiceLayout() {
    return invoiceLayout;
  }


  public void setInvoiceLayout(InvoiceLayoutEnum invoiceLayout) {
    this.invoiceLayout = invoiceLayout;
  }


  public CompanyResponseCompany minusFormat(Integer minusFormat) {
    
    this.minusFormat = minusFormat;
    return this;
  }

   /**
   * マイナスの表示方法（0: -、 1: △）
   * minimum: 0
   * maximum: 1
   * @return minusFormat
  **/
  @ApiModelProperty(example = "0", required = true, value = "マイナスの表示方法（0: -、 1: △）")

  public Integer getMinusFormat() {
    return minusFormat;
  }


  public void setMinusFormat(Integer minusFormat) {
    this.minusFormat = minusFormat;
  }


  public CompanyResponseCompany name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 事業所の正式名称 (100文字以内)
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "freee事務所", required = true, value = "事業所の正式名称 (100文字以内)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CompanyResponseCompany nameKana(String nameKana) {
    
    this.nameKana = nameKana;
    return this;
  }

   /**
   * 正式名称フリガナ (100文字以内)
   * @return nameKana
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "フリージムショ", required = true, value = "正式名称フリガナ (100文字以内)")

  public String getNameKana() {
    return nameKana;
  }


  public void setNameKana(String nameKana) {
    this.nameKana = nameKana;
  }


  public CompanyResponseCompany phone1(String phone1) {
    
    this.phone1 = phone1;
    return this;
  }

   /**
   * 電話番号１
   * @return phone1
  **/
  @ApiModelProperty(example = "03-1234-xxxx", required = true, value = "電話番号１")

  public String getPhone1() {
    return phone1;
  }


  public void setPhone1(String phone1) {
    this.phone1 = phone1;
  }


  public CompanyResponseCompany phone2(String phone2) {
    
    this.phone2 = phone2;
    return this;
  }

   /**
   * 電話番号２
   * @return phone2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "090-1234-xxxx", required = true, value = "電話番号２")

  public String getPhone2() {
    return phone2;
  }


  public void setPhone2(String phone2) {
    this.phone2 = phone2;
  }


  public CompanyResponseCompany prefectureCode(Integer prefectureCode) {
    
    this.prefectureCode = prefectureCode;
    return this;
  }

   /**
   * 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
   * minimum: 0
   * maximum: 46
   * @return prefectureCode
  **/
  @ApiModelProperty(example = "4", required = true, value = "都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄")

  public Integer getPrefectureCode() {
    return prefectureCode;
  }


  public void setPrefectureCode(Integer prefectureCode) {
    this.prefectureCode = prefectureCode;
  }


  public CompanyResponseCompany privateSettlement(Boolean privateSettlement) {
    
    this.privateSettlement = privateSettlement;
    return this;
  }

   /**
   * プライベート資金/役員資金（false: 使用しない、true: 使用する）
   * @return privateSettlement
  **/
  @ApiModelProperty(example = "true", required = true, value = "プライベート資金/役員資金（false: 使用しない、true: 使用する）")

  public Boolean getPrivateSettlement() {
    return privateSettlement;
  }


  public void setPrivateSettlement(Boolean privateSettlement) {
    this.privateSettlement = privateSettlement;
  }


  public CompanyResponseCompany role(RoleEnum role) {
    
    this.role = role;
    return this;
  }

   /**
   * ユーザーの権限
   * @return role
  **/
  @ApiModelProperty(example = "admin", required = true, value = "ユーザーの権限")

  public RoleEnum getRole() {
    return role;
  }


  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public CompanyResponseCompany streetName1(String streetName1) {
    
    this.streetName1 = streetName1;
    return this;
  }

   /**
   * 市区町村・番地
   * @return streetName1
  **/
  @ApiModelProperty(example = "ＸＸ区ＹＹ１−１−１", required = true, value = "市区町村・番地")

  public String getStreetName1() {
    return streetName1;
  }


  public void setStreetName1(String streetName1) {
    this.streetName1 = streetName1;
  }


  public CompanyResponseCompany streetName2(String streetName2) {
    
    this.streetName2 = streetName2;
    return this;
  }

   /**
   * 建物名・部屋番号など
   * @return streetName2
  **/
  @ApiModelProperty(example = "ビル１Ｆ", required = true, value = "建物名・部屋番号など")

  public String getStreetName2() {
    return streetName2;
  }


  public void setStreetName2(String streetName2) {
    this.streetName2 = streetName2;
  }


  public CompanyResponseCompany taxAtSourceCalcType(Integer taxAtSourceCalcType) {
    
    this.taxAtSourceCalcType = taxAtSourceCalcType;
    return this;
  }

   /**
   * 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）
   * minimum: 0
   * maximum: 1
   * @return taxAtSourceCalcType
  **/
  @ApiModelProperty(example = "0", required = true, value = "源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）")

  public Integer getTaxAtSourceCalcType() {
    return taxAtSourceCalcType;
  }


  public void setTaxAtSourceCalcType(Integer taxAtSourceCalcType) {
    this.taxAtSourceCalcType = taxAtSourceCalcType;
  }


  public CompanyResponseCompany txnNumberFormat(TxnNumberFormatEnum txnNumberFormat) {
    
    this.txnNumberFormat = txnNumberFormat;
    return this;
  }

   /**
   * 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
   * @return txnNumberFormat
  **/
  @ApiModelProperty(example = "not_used", required = true, value = "仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））")

  public TxnNumberFormatEnum getTxnNumberFormat() {
    return txnNumberFormat;
  }


  public void setTxnNumberFormat(TxnNumberFormatEnum txnNumberFormat) {
    this.txnNumberFormat = txnNumberFormat;
  }


  public CompanyResponseCompany usePartnerCode(Boolean usePartnerCode) {
    
    this.usePartnerCode = usePartnerCode;
    return this;
  }

   /**
   * 取引先コードの利用設定（true: 有効、 false: 無効）
   * @return usePartnerCode
  **/
  @ApiModelProperty(example = "true", required = true, value = "取引先コードの利用設定（true: 有効、 false: 無効）")

  public Boolean getUsePartnerCode() {
    return usePartnerCode;
  }


  public void setUsePartnerCode(Boolean usePartnerCode) {
    this.usePartnerCode = usePartnerCode;
  }


  public CompanyResponseCompany workflowSetting(WorkflowSettingEnum workflowSetting) {
    
    this.workflowSetting = workflowSetting;
    return this;
  }

   /**
   * 仕訳承認フロー（enable: 有効、 disable: 無効）
   * @return workflowSetting
  **/
  @ApiModelProperty(example = "disabled", required = true, value = "仕訳承認フロー（enable: 有効、 disable: 無効）")

  public WorkflowSettingEnum getWorkflowSetting() {
    return workflowSetting;
  }


  public void setWorkflowSetting(WorkflowSettingEnum workflowSetting) {
    this.workflowSetting = workflowSetting;
  }


  public CompanyResponseCompany zipcode(String zipcode) {
    
    this.zipcode = zipcode;
    return this;
  }

   /**
   * 郵便番号
   * @return zipcode
  **/
  @ApiModelProperty(example = "000-0000", required = true, value = "郵便番号")

  public String getZipcode() {
    return zipcode;
  }


  public void setZipcode(String zipcode) {
    this.zipcode = zipcode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyResponseCompany companyResponseCompany = (CompanyResponseCompany) o;
    return Objects.equals(this.amountFraction, companyResponseCompany.amountFraction) &&
        Objects.equals(this.contactName, companyResponseCompany.contactName) &&
        Objects.equals(this.corporateNumber, companyResponseCompany.corporateNumber) &&
        Objects.equals(this.defaultWalletAccountId, companyResponseCompany.defaultWalletAccountId) &&
        Objects.equals(this.displayName, companyResponseCompany.displayName) &&
        Objects.equals(this.fax, companyResponseCompany.fax) &&
        Objects.equals(this.fiscalYears, companyResponseCompany.fiscalYears) &&
        Objects.equals(this.headCount, companyResponseCompany.headCount) &&
        Objects.equals(this.id, companyResponseCompany.id) &&
        Objects.equals(this.industryClass, companyResponseCompany.industryClass) &&
        Objects.equals(this.industryCode, companyResponseCompany.industryCode) &&
        Objects.equals(this.invoiceLayout, companyResponseCompany.invoiceLayout) &&
        Objects.equals(this.minusFormat, companyResponseCompany.minusFormat) &&
        Objects.equals(this.name, companyResponseCompany.name) &&
        Objects.equals(this.nameKana, companyResponseCompany.nameKana) &&
        Objects.equals(this.phone1, companyResponseCompany.phone1) &&
        Objects.equals(this.phone2, companyResponseCompany.phone2) &&
        Objects.equals(this.prefectureCode, companyResponseCompany.prefectureCode) &&
        Objects.equals(this.privateSettlement, companyResponseCompany.privateSettlement) &&
        Objects.equals(this.role, companyResponseCompany.role) &&
        Objects.equals(this.streetName1, companyResponseCompany.streetName1) &&
        Objects.equals(this.streetName2, companyResponseCompany.streetName2) &&
        Objects.equals(this.taxAtSourceCalcType, companyResponseCompany.taxAtSourceCalcType) &&
        Objects.equals(this.txnNumberFormat, companyResponseCompany.txnNumberFormat) &&
        Objects.equals(this.usePartnerCode, companyResponseCompany.usePartnerCode) &&
        Objects.equals(this.workflowSetting, companyResponseCompany.workflowSetting) &&
        Objects.equals(this.zipcode, companyResponseCompany.zipcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountFraction, contactName, corporateNumber, defaultWalletAccountId, displayName, fax, fiscalYears, headCount, id, industryClass, industryCode, invoiceLayout, minusFormat, name, nameKana, phone1, phone2, prefectureCode, privateSettlement, role, streetName1, streetName2, taxAtSourceCalcType, txnNumberFormat, usePartnerCode, workflowSetting, zipcode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyResponseCompany {\n");
    sb.append("    amountFraction: ").append(toIndentedString(amountFraction)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    corporateNumber: ").append(toIndentedString(corporateNumber)).append("\n");
    sb.append("    defaultWalletAccountId: ").append(toIndentedString(defaultWalletAccountId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    fiscalYears: ").append(toIndentedString(fiscalYears)).append("\n");
    sb.append("    headCount: ").append(toIndentedString(headCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industryClass: ").append(toIndentedString(industryClass)).append("\n");
    sb.append("    industryCode: ").append(toIndentedString(industryCode)).append("\n");
    sb.append("    invoiceLayout: ").append(toIndentedString(invoiceLayout)).append("\n");
    sb.append("    minusFormat: ").append(toIndentedString(minusFormat)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameKana: ").append(toIndentedString(nameKana)).append("\n");
    sb.append("    phone1: ").append(toIndentedString(phone1)).append("\n");
    sb.append("    phone2: ").append(toIndentedString(phone2)).append("\n");
    sb.append("    prefectureCode: ").append(toIndentedString(prefectureCode)).append("\n");
    sb.append("    privateSettlement: ").append(toIndentedString(privateSettlement)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    streetName1: ").append(toIndentedString(streetName1)).append("\n");
    sb.append("    streetName2: ").append(toIndentedString(streetName2)).append("\n");
    sb.append("    taxAtSourceCalcType: ").append(toIndentedString(taxAtSourceCalcType)).append("\n");
    sb.append("    txnNumberFormat: ").append(toIndentedString(txnNumberFormat)).append("\n");
    sb.append("    usePartnerCode: ").append(toIndentedString(usePartnerCode)).append("\n");
    sb.append("    workflowSetting: ").append(toIndentedString(workflowSetting)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

