/*
 * freee API
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.freee.accounting.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import jp.co.freee.accounting.models.UserCapability;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for InlineResponse20016
 */
public class InlineResponse20016Test {
    private final InlineResponse20016 model = new InlineResponse20016();

    /**
     * Model tests for InlineResponse20016
     */
    @Test
    public void testInlineResponse20016() {
        // TODO: test InlineResponse20016
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'accountItemStatements'
     */
    @Test
    public void accountItemStatementsTest() {
        // TODO: test accountItemStatements
    }

    /**
     * Test the property 'accountItems'
     */
    @Test
    public void accountItemsTest() {
        // TODO: test accountItems
    }

    /**
     * Test the property 'annualReports'
     */
    @Test
    public void annualReportsTest() {
        // TODO: test annualReports
    }

    /**
     * Test the property 'approvalFlowRoutes'
     */
    @Test
    public void approvalFlowRoutesTest() {
        // TODO: test approvalFlowRoutes
    }

    /**
     * Test the property 'approvalRequests'
     */
    @Test
    public void approvalRequestsTest() {
        // TODO: test approvalRequests
    }

    /**
     * Test the property 'backups'
     */
    @Test
    public void backupsTest() {
        // TODO: test backups
    }

    /**
     * Test the property 'bankAccountantStaffUsers'
     */
    @Test
    public void bankAccountantStaffUsersTest() {
        // TODO: test bankAccountantStaffUsers
    }

    /**
     * Test the property 'bizAllocations'
     */
    @Test
    public void bizAllocationsTest() {
        // TODO: test bizAllocations
    }

    /**
     * Test the property 'companies'
     */
    @Test
    public void companiesTest() {
        // TODO: test companies
    }

    /**
     * Test the property 'consumptionEntries'
     */
    @Test
    public void consumptionEntriesTest() {
        // TODO: test consumptionEntries
    }

    /**
     * Test the property 'costAllocations'
     */
    @Test
    public void costAllocationsTest() {
        // TODO: test costAllocations
    }

    /**
     * Test the property 'dealTemplates'
     */
    @Test
    public void dealTemplatesTest() {
        // TODO: test dealTemplates
    }

    /**
     * Test the property 'deals'
     */
    @Test
    public void dealsTest() {
        // TODO: test deals
    }

    /**
     * Test the property 'docPostings'
     */
    @Test
    public void docPostingsTest() {
        // TODO: test docPostings
    }

    /**
     * Test the property 'docs'
     */
    @Test
    public void docsTest() {
        // TODO: test docs
    }

    /**
     * Test the property 'expenseApplicationTemplates'
     */
    @Test
    public void expenseApplicationTemplatesTest() {
        // TODO: test expenseApplicationTemplates
    }

    /**
     * Test the property 'expenseApplications'
     */
    @Test
    public void expenseApplicationsTest() {
        // TODO: test expenseApplications
    }

    /**
     * Test the property 'fixedAssets'
     */
    @Test
    public void fixedAssetsTest() {
        // TODO: test fixedAssets
    }

    /**
     * Test the property 'inventoryRefreshes'
     */
    @Test
    public void inventoryRefreshesTest() {
        // TODO: test inventoryRefreshes
    }

    /**
     * Test the property 'invitations'
     */
    @Test
    public void invitationsTest() {
        // TODO: test invitations
    }

    /**
     * Test the property 'items'
     */
    @Test
    public void itemsTest() {
        // TODO: test items
    }

    /**
     * Test the property 'manualJournalTemplates'
     */
    @Test
    public void manualJournalTemplatesTest() {
        // TODO: test manualJournalTemplates
    }

    /**
     * Test the property 'manualJournals'
     */
    @Test
    public void manualJournalsTest() {
        // TODO: test manualJournals
    }

    /**
     * Test the property 'monthEnd'
     */
    @Test
    public void monthEndTest() {
        // TODO: test monthEnd
    }

    /**
     * Test the property 'oauthApplications'
     */
    @Test
    public void oauthApplicationsTest() {
        // TODO: test oauthApplications
    }

    /**
     * Test the property 'oauthAuthorizations'
     */
    @Test
    public void oauthAuthorizationsTest() {
        // TODO: test oauthAuthorizations
    }

    /**
     * Test the property 'openingBalances'
     */
    @Test
    public void openingBalancesTest() {
        // TODO: test openingBalances
    }

    /**
     * Test the property 'partners'
     */
    @Test
    public void partnersTest() {
        // TODO: test partners
    }

    /**
     * Test the property 'paymentRecords'
     */
    @Test
    public void paymentRecordsTest() {
        // TODO: test paymentRecords
    }

    /**
     * Test the property 'paymentRequests'
     */
    @Test
    public void paymentRequestsTest() {
        // TODO: test paymentRequests
    }

    /**
     * Test the property 'receiptStreamEditor'
     */
    @Test
    public void receiptStreamEditorTest() {
        // TODO: test receiptStreamEditor
    }

    /**
     * Test the property 'receipts'
     */
    @Test
    public void receiptsTest() {
        // TODO: test receipts
    }

    /**
     * Test the property 'reports'
     */
    @Test
    public void reportsTest() {
        // TODO: test reports
    }

    /**
     * Test the property 'reportsBs'
     */
    @Test
    public void reportsBsTest() {
        // TODO: test reportsBs
    }

    /**
     * Test the property 'reportsCashBalance'
     */
    @Test
    public void reportsCashBalanceTest() {
        // TODO: test reportsCashBalance
    }

    /**
     * Test the property 'reportsCrosstabs'
     */
    @Test
    public void reportsCrosstabsTest() {
        // TODO: test reportsCrosstabs
    }

    /**
     * Test the property 'reportsGeneralLedgers'
     */
    @Test
    public void reportsGeneralLedgersTest() {
        // TODO: test reportsGeneralLedgers
    }

    /**
     * Test the property 'reportsIncomeExpense'
     */
    @Test
    public void reportsIncomeExpenseTest() {
        // TODO: test reportsIncomeExpense
    }

    /**
     * Test the property 'reportsJournals'
     */
    @Test
    public void reportsJournalsTest() {
        // TODO: test reportsJournals
    }

    /**
     * Test the property 'reportsManagementsNavigation'
     */
    @Test
    public void reportsManagementsNavigationTest() {
        // TODO: test reportsManagementsNavigation
    }

    /**
     * Test the property 'reportsManagementsPlanning'
     */
    @Test
    public void reportsManagementsPlanningTest() {
        // TODO: test reportsManagementsPlanning
    }

    /**
     * Test the property 'reportsPayables'
     */
    @Test
    public void reportsPayablesTest() {
        // TODO: test reportsPayables
    }

    /**
     * Test the property 'reportsPl'
     */
    @Test
    public void reportsPlTest() {
        // TODO: test reportsPl
    }

    /**
     * Test the property 'reportsReceivables'
     */
    @Test
    public void reportsReceivablesTest() {
        // TODO: test reportsReceivables
    }

    /**
     * Test the property 'requestForms'
     */
    @Test
    public void requestFormsTest() {
        // TODO: test requestForms
    }

    /**
     * Test the property 'resets'
     */
    @Test
    public void resetsTest() {
        // TODO: test resets
    }

    /**
     * Test the property 'sections'
     */
    @Test
    public void sectionsTest() {
        // TODO: test sections
    }

    /**
     * Test the property 'signInLogs'
     */
    @Test
    public void signInLogsTest() {
        // TODO: test signInLogs
    }

    /**
     * Test the property 'spreadsheets'
     */
    @Test
    public void spreadsheetsTest() {
        // TODO: test spreadsheets
    }

    /**
     * Test the property 'systemConversion'
     */
    @Test
    public void systemConversionTest() {
        // TODO: test systemConversion
    }

    /**
     * Test the property 'taxReports'
     */
    @Test
    public void taxReportsTest() {
        // TODO: test taxReports
    }

    /**
     * Test the property 'taxReturn'
     */
    @Test
    public void taxReturnTest() {
        // TODO: test taxReturn
    }

    /**
     * Test the property 'taxes'
     */
    @Test
    public void taxesTest() {
        // TODO: test taxes
    }

    /**
     * Test the property 'transfers'
     */
    @Test
    public void transfersTest() {
        // TODO: test transfers
    }

    /**
     * Test the property 'userMatchers'
     */
    @Test
    public void userMatchersTest() {
        // TODO: test userMatchers
    }

    /**
     * Test the property 'walletTxns'
     */
    @Test
    public void walletTxnsTest() {
        // TODO: test walletTxns
    }

    /**
     * Test the property 'walletables'
     */
    @Test
    public void walletablesTest() {
        // TODO: test walletables
    }

    /**
     * Test the property 'workflows'
     */
    @Test
    public void workflowsTest() {
        // TODO: test workflows
    }

    /**
     * Test the property 'yearEnd'
     */
    @Test
    public void yearEndTest() {
        // TODO: test yearEnd
    }

}
